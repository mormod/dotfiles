global !p
import regex as re
from os.path import exists

def g_clever_space(placeholder=2):
	if t[placeholder] and t[placeholder][0] not in [',', '.', '?', '-', ' ', '{', '}', '[', ']', '<', '>', ':', '_', '^']:
		return ' '
	else:
		return ''

def get_formatted_string(string):
	tmp = re.sub(r"\W+", "-", str(string))
	if tmp != '':
		first_is_dash = tmp[0] == '-'
		last_is_dash = tmp[-1] == '-'
		if first_is_dash:
			tmp = tmp[1:]
		if last_is_dash and tmp != '':
			tmp = tmp[:-1]
		return tmp.lower()
	return ''
	

def get_last_sec_title(type):

	if type == "section":
		return ''
	
	d = {"section": 0, "subsection": 1, "subsubsection": 2, "paragraph": 3}
	di = {0: "section", 1: "subsection", 2: "subsubsection", 3: "paragraph"}	
	reg = re.compile("\\contentsline \{([a-zA-Z]+)\}\{(.*?)\{(\.|\d)+\}((\w| )+)")
	
	other_main_file_names_to_try = [str(snip.basename), "main", "sum"]
	to_open = None	

	for file in other_main_file_names_to_try:
		if exists(file+".toc"):
			to_open = file
	
	if to_open is None:
		return
		
	fd = reversed(list(open(to_open+".toc", "r")))

	if fd is None:
		return ''

	for line in fd:
		res = reg.search(line)
		if res is not None and d[res.group(1)] < d[type]:
			res = get_formatted_string(res.group(4))
			last = get_last_sec_title(di[d[type] - 1])
			if last == '':
				return res.lower()
			else:
				return last + ":" + res.lower()

	return ""

endglobal

snippet "be(g|gin)?( (\S+))?" "begin{} / end{}" rb
\begin{${1:`!p snip.rv = match.group(3) if match.group(2) is not None else "env"`}}
	${3:${VISUAL}}
\end{$1}
endsnippet

snippet "def(i)?" "beg/end defi" rb
\begin{defi}{$1}
	${2:${VISUAL}}
\end{defi}
endsnippet

snippet "theo" "beg/end theo" b
\begin{theo}{$1}
	${2:${VISUAL}}
\end{theo}
endsnippet

snippet "alg(o)?" "beg/end algo" rb
\begin{algo}{$1}
	\begin{enumerate}
		\item $2
	\end{enumerate}
\end{algo}
endsnippet

snippet iM "inline math" w
\( ${1:${VISUAL}} \)`!p snip.rv = g_clever_space()`$2
endsnippet

snippet oM "outline math" w
\[
	${1:${VISUAL}}
\]$0
endsnippet

snippet item "itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet enum "enumeration" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet cols "columns" b
\begin{columns}
	\column{${1:0.65}\textwidth}
		${2:${VISUAL}}	
	\column{`!p 
try:
	snip.rv = round(1.0 - float(t[1]), 2)
except Exception:
	snip.rv = 0
`\textwidth}
		$3
\end{columns}$0
endsnippet

snippet nitem "\note[item]{}" 
\note[item]{$1}$0
endsnippet

snippet frm "frame with title"
\begin{frame}{$1}
	$0
\end{frame}
endsnippet

snippet fig "figure" b
\begin{figure}[H]
	\centering
	\includegraphics[width=0.75\textwidth]{$1}
	\caption{$2}
	\label{img-`!p snip.rv = get_formatted_string(str(t[1]).split('/')[-1].split('.')[0])`}
\end{figure}$0
endsnippet

snippet "([\s+|(|)|\[|\]|{|}|<|>])bf( ((\S| )+))?" "boldface" r
`!p snip.rv = match.group(1)`\textbf{${1:`!p 
snip.rv = match.group(3) if match.group(2) is not None else snip.v.text`}}`!p snip.rv = g_clever_space()`$2
endsnippet

priority 1
snippet	"([\s+|(|)|\[|\]|{|}|<|>])att( ((\S| )+))?" "attention" r 
`!p snip.rv = match.group(1)`\attention{${1:`!p 
snip.rv = match.group(3) if match.group(2) is not None else snip.v.text`}}`!p snip.rv = g_clever_space()`$2
endsnippet
priority 0

snippet "([\s+|(|)|\[|\]|{|}|<|>])tt( ((\S| )+))?" "monospace" r
`!p snip.rv = match.group(1)`\texttt{${1:`!p 
snip.rv = match.group(3) if match.group(2) is not None else snip.v.text`}}`!p snip.rv = g_clever_space()`$2
endsnippet

snippet "([\s*|(|)|\[|\]|{|}|<|>])tit( ((\S| )+))?" "italic" r
`!p snip.rv = match.group(1)`\textit{${1:`!p 
snip.rv = match.group(3) if match.group(2) is not None else snip.v.text`}}`!p snip.rv = g_clever_space()`$2
endsnippet

snippet "([\s+|(|)|\[|\]|{|}|<|>])sc( ((\S| )+))?" "small caps" r
`!p snip.rv = match.group(1)`\textsc{${1:`!p 
snip.rv = match.group(3) if match.group(2) is not None else snip.v.text`}}`!p snip.rv = g_clever_space()`$2
endsnippet

snippet clst "c listing" b
\begin{lstlisting}[language=C]
	$0
\end{lstlisting}
endsnippet

snippet sec "section" b
\newpage
\section{$1}
\label{s:`!p snip.rv = get_formatted_string(t[1])`}

$0
endsnippet

snippet ssec "subsection" b
\subsection{$1}
\label{ss:`!p 
snip.rv = get_last_sec_title("subsection") + ":" + get_formatted_string(t[1])`}

$0
endsnippet

snippet sssec "subsubsection" b
\subsubsection{$1}
\label{sss:`!p
snip.rv = get_last_sec_title("subsubsection") + ":" + get_formatted_string(t[1])`}

$0
endsnippet

snippet pgf "paragraph" b
\paragraph{$1}
\label{pgf:`!p
snip.rv = get_last_sec_title("paragraph") + ":" + get_formatted_string(t[1])`}

$0
endsnippet

priority 1
snippet "\\item(\s)?" "\item[x]" br
\\item[$1] â€“ $2
endsnippet
priority 0

snippet "\\([a-zA-Z]+)" "generic cmd" ir
\\`!p snip.rv = match.group(1)`{${1:${VISUAL}}}`!p snip.rv = g_clever_space()`$2
endsnippet

snippet bls "vspace -baselineskip"
\vspace{-\baselineskip}
endsnippet

snippet arw "single arrow" 
\( \rightarrow \)`!p snip.rv = g_clever_space(1)`$1
endsnippet

snippet todo "todo inline"
\todo[inline]{$1}`!p snip.rv = g_clever_space()`$2
endsnippet
